<!DOCTYPE html>
<html>
<head>
	<title><%= title %></title>
	<link rel='stylesheet' href='/stylesheets/style.css' />
	<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.7.3/socket.io.js"></script>
	<script  src="http://code.jquery.com/jquery-latest.min.js"></script>

	<script type="text/javascript">
		var socket = undefined;
		var global_packet_srl = 0;

		function Reqlog(p_cmd, p_packet) {
			console.log(p_cmd, JSON.stringify(p_packet));
		}

		function Acklog(p_packet) {
			console.log('Ack -', p_packet);
		}

		function CheckAccount() {
			var account = $('#ReqDuckAccount > #account').val();
			if (account == 0 || account == NaN || account == '') {
				alert('계정 입력');
				$('#ReqDuckAccount > #account').focus();
				return false;
			}
			return true;
		}

		function Connect(p_port) {
			if (typeof socket != 'undefined')
				socket.disconnect();
			
			console.log('port', p_port);
			if ( p_port == 7953 ) {
				socket = io.connect('http://52.78.25.165:' + p_port, { 'forceNew': true });
			} else {
				socket = io.connect('http://172.20.70.61:' + p_port, { 'forceNew': true });
			}

			socket.on('connect', function() { console.log('connected server...'); });
			socket.on('disconnect', function(recv) { console.log('disconnect server...', recv); });
			socket.on('RecvError', function(recv) { console.log(recv); });
			socket.on('evt_notice', function(recv) { console.log(recv); });

			// recv - duck
			socket.on('AckLogon', function(recv_packet) {
				Acklog(recv_packet);

				var recv = JSON.parse(recv_packet);
				$('#uuid, div').val(recv.uuid);

				// ReqUser
				var send_packet = function() { 
					this.uuid;
					this.packet_srl;
				}
				var send = new send_packet();
				send.uuid = recv.uuid;
				send.packet_srl = global_packet_srl++;

				socket.emit('ReqUser', JSON.stringify(send));
			});

			socket.on('AckUser', function(recv_packet) {
			 	Acklog(recv_packet);
			 	$('#ReqLogon > #output').html(recv_packet);

			 	var recv = JSON.parse(recv_packet);

				// ReqUser
				var send_packet = function() { 
					this.uuid;
					this.packet_srl;
				}
				var send = new send_packet();
				send.uuid = recv.uuid;
				send.packet_srl = global_packet_srl++;
			 });

			socket.on('AckDuckAccount', function(recv_packet) { Acklog(recv_packet); });
			socket.on('AckStageInfo', function(recv_packet) { Acklog(recv_packet); });
			socket.on('AckChapterReward', function(recv_packet) { Acklog(recv_packet); });
		}

		function Disconnect() {
			if (typeof socket != 'undefined')
				socket.disconnect();
		}

		// send
		$(document).ready(function() {
			// Design 서버에 로그인
			Connect(2016);

			//------------------------------------------------------------------------------------------------------------------
			$('#ConnectServer > #connect').click(function() {
				var port = $('#ConnectServer > #port').val();
				Connect(port);
			});

			//------------------------------------------------------------------------------------------------------------------
			$('#ConnectServer > #disconnect').click(function() {
				Disconnect();
			});

			//------------------------------------------------------------------------------------------------------------------
			$('#ReqLogon > #Send').click(function() {
				var packet = function() {
					this.account;
					this.packet_srl;
				}

				var send = new packet();
				send.packet_srl = global_packet_srl++;

				send.account = $('#ReqLogon > #account').val();
				Reqlog(send);

				socket.emit('ReqLogon', JSON.stringify(send));
			});

			//------------------------------------------------------------------------------------------------------------------
			$('#ReqStageInfo > #Send').click(function() {
				if (CheckAccount() == false) return;
				SendPacket('ReqStageInfo', $('#ReqDuckAccount > #account'), $('#ReqStageInfo > #chapter_id'), $('#ReqStageInfo > #stage_id'));
			});

			//------------------------------------------------------------------------------------------------------------------
			$('#ReqChapterReward > #Send').click(function() {
				if (CheckAccount() == false) return;
				SendPacket('ReqChapterReward', $('#ReqDuckAccount > #account'), $('#ReqChapterReward > #clear_grade'));
			});
		});

		function SendPacket(p_cmd) {
			var packet = new Object();
			packet['packet_srl'] = global_packet_srl++;

			for (var cnt = 1; cnt < arguments.length; ++cnt)
				packet[arguments[cnt].attr('id')] = arguments[cnt].val();

			Reqlog(p_cmd, packet);
			socket.emit(p_cmd, JSON.stringify(packet));
		}
	</script>

	<script type="text/javascript">
	</script>
</head>
	<body>
		<h1><%= title %></h1>
		<h1>
			<a href="/account">ACCOUNT</a>
			<a href="/hero">HERO</a>
			<a href="/item">ITEM</a>
			<a href="/stage">STAGE</a>
			<a href="/mail">MAIL</a>
		</h1>
		<div id="ConnectServer">
			GameServerPort: <select id="port">
				<option value="2016">Design</option>
				<option value="7953">JW</option>
				<option value="7952">JW_Test</option>
				<option value="3000">Contents</option>
				<option value="7953">AWS</option>
			</select>
			<input type="button" id="connect" value="Connect"/>
			<input type="button" id="disconnect" value="Diconnect"/>
		</div>
		<br/>
		<div id="ReqLogon">
			로그온 <input type="text" id="account" size="10" placeholder="account" />
			<input type="button" id="Send" value="Send" /><div id="output"></div>
		</div>
		<br/>
		<div id="ReqStageInfo">
			챕터 클리어 정보<br/>
			<input type="button" id="Send" value="Send" /><div id="output"></div>
		</div><br/>
		<div id="ReqBattleFinish">
			시나리오 배틀 종료</br>
			클리어 등급 : 
			<select id="clear_grade">
				<option value="3">☆☆☆</option><option value="2">☆☆</option><option value="1">☆</option>
			</select>
			<input type="button" id="Send" value="Send" /><div id="output"></div>
		</div><br/>
	</body>
</html>