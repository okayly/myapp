<!DOCTYPE html>
<html>
<head>
	<title><%= title %></title>
	<link rel='stylesheet' href='/stylesheets/style.css' />
	<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.7.3/socket.io.js"></script>
	<script  src="http://code.jquery.com/jquery-latest.min.js"></script>

	<script type="text/javascript">
		var socket = undefined;

		function Reqlog(p_cmd, p_packet) {
			console.log(p_cmd, JSON.stringify(p_packet));
		}

		function Acklog(p_packet) {
			console.log('Ack -', p_packet);
		}

		function CheckAccount() {
			var account = $('#ReqDuckAccount > #account').val();
			if (account == 0 || account == NaN || account == '') {
				alert('계정 입력');
				$('#ReqDuckAccount > #account').focus();
				return false;
			}
			return true;
		}

		function Connect(p_port) {
			if (typeof socket != 'undefined')
				socket.disconnect();
			
			console.log('port', p_port);
			socket = io.connect('http://172.20.70.61:' + p_port, {'forceNew': true});

			socket.on('connect', function() { console.log('connected server...'); });
			socket.on('disconnect', function(recv) { console.log('disconnect server...', recv); });
			socket.on('RecvError', function(recv) { console.log(recv); });
			socket.on('evt_notice', function(recv) { console.log(recv); });
			socket.on('AckDuckServerMsg', function(recv) { Acklog(recv); });


			// recv - duck
			socket.on('AckDuckAccount', function(recv) { Acklog(recv); });
			socket.on('AckDuckAccountLevel', function(recv) { Acklog(recv); });
			socket.on('AckDuckAccountBuff', function(recv) { Acklog(recv); });
			socket.on('AckDuckVip', function(recv) { Acklog(recv); });
			socket.on('AckDuckCash', function(recv) { Acklog(recv); });
			socket.on('AckDuckGold', function(recv) { Acklog(recv); });
			socket.on('AckDuckHonorPoint', function(recv) { Acklog(recv); });
			socket.on('AckDuckAlliancePoint', function(recv) { Acklog(recv); });
			socket.on('AckDuckChallengePoint', function(recv) { Acklog(recv); });
			socket.on('AckDuckStamina', function(recv) { Acklog(recv); });
			socket.on('AckDuckSkillPoint', function(recv) { Acklog(recv); });
			socket.on('AckDuckDailyContents', function(recv) { Acklog(recv); });
		}

		function Disconnect() {
			if (typeof socket != 'undefined')
				socket.disconnect();
		}

		// send
		$(document).ready(function() {
			// Design 서버에 로그인
			Connect(2016);
			
			//------------------------------------------------------------------------------------------------------------------
			$('#ConnectServer > #connect').click(function() {
				var port = $('#ConnectServer > #port').val();
				Connect(port);
			});

			//------------------------------------------------------------------------------------------------------------------
			$('#ConnectServer > #disconnect').click(function() {
				Disconnect();
			});

			//------------------------------------------------------------------------------------------------------------------
			$('#ReqDuckServerMsg > #Send').click(function() {				
				SendPacket('ReqDuckServerMsg', $('#ReqDuckServerMsg > #msg'), $('#ReqDuckServerMsg > #pass'));
			});

			//------------------------------------------------------------------------------------------------------------------
			$('#ReqDuckAccount > #Send').click(function() {
				var packet = function() {
					this.account;
				};

				var send = new packet();
				send.account = $('#ReqDuckAccount > #account').val();
				Reqlog('ReqDuckAccount', send);

				socket.emit('ReqDuckAccount', JSON.stringify(send));
			});

			//------------------------------------------------------------------------------------------------------------------
			$('#ReqCommand').change(function (p_evt) {
				// console.log('evt', p_evt);
				FileSelection(p_evt);
			});
		});

		function SendPacket(p_cmd) {
			var packet = new Object();
			for (var cnt = 1; cnt < arguments.length; ++cnt)
				packet[arguments[cnt].attr('id')] = arguments[cnt].val();

			Reqlog(p_cmd, packet);
			socket.emit(p_cmd, JSON.stringify(packet));
		}

		function FileSelection(evt)	{
			var file = evt.target.files[0];

			var reader = new FileReader();
			reader.onload = function (e) {
				var text = reader.result;
				console.log('text', text);
			}
			reader.readAsText(file);
		}
	</script>

	<script type="text/javascript">
	</script>
</head>
	<body>
		<h1><%= title %></h1>
		<h1>
			<a href="/account">ACCOUNT</a>
			<a href="/hero">HERO</a>
			<a href="/item">ITEM</a>
			<a href="/stage">STAGE</a>
			<a href="/mail">MAIL</a>
		</h1>
		<div id="ConnectServer">
			GameServerPort: <select id="port">
				<option value="2016">Design</option>
				<option value="7953">JW</option>
				<option value="7952">JW_Test</option>
				<option value="3000">Contents</option>
				<option value="4634">Build</option>
			</select>
			<input type="button" id="connect" value="Connect"/>
			<input type="button" id="disconnect" value="Diconnect"/>
		</div>
		<div id="ReqDuckServerMsg">
			할말 <select id="msg">
				<option value="서버 재시작 합니다.">서버 재시작 합니다.</option>
			</select>
			<select id="pass">
				<option value="true">true</option>
			</select>
			<input type="button" id="Send" value="Send" /><div id="output"></div>
		</div>
		<br/>
		<div id="ReqDuckAccount">
			계정확인 <input type="text" id="account" size="10" placeholder="account" />
			<input type="button" id="Send" value="Confirm" /><div id="output"></div>
		</div>
		<br/>
		<div id="ReqCommand">
			파일 <input type="file" id="fileinput" />
		</div>
		<br/>
	</body>
</html>